"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  @license   MIT
 *  @copyright OmniSharp Team
 *  @summary   Adds support for https://github.com/Microsoft/language-server-protocol (and more!) to https://atom.io
 */
var _ = require('lodash');
var protocol_1 = require('atom-languageservices/protocol');
var types_1 = require('atom-languageservices/types');
var ts_disposables_1 = require('ts-disposables');
var constants_1 = require('../constants');
var convert_1 = require('./utils/convert');
var LanguageClientTextEditorChanges_1 = require('../omni/LanguageClientTextEditorChanges');
var TextEditorSyncProtocol = (function (_super) {
    __extends(TextEditorSyncProtocol, _super);
    function TextEditorSyncProtocol(client, syncExpression, documentDelayer, atomViewFinder, waitService, editor) {
        var _this = this;
        _super.call(this);
        this._version = 0;
        this._changes = new LanguageClientTextEditorChanges_1.LanguageClientTextEditorChanges();
        this._pausedEvents = [];
        this._client = client;
        this._fullText = this._client.capabilities.textDocumentSync === types_1.TextDocumentSyncKind.Full;
        this._waitService = waitService;
        this._editor = editor;
        this._atomViewFinder = atomViewFinder;
        this._syncExpression = syncExpression;
        this._documentDelayer = documentDelayer;
        this._disposable.add(waitService.waiting$.subscribe(function (paused) {
            if (!paused && _this._pausedEvents.length) {
                _.each(_this._pausedEvents, function (event) {
                    event();
                });
            }
        }));
        this._configure();
    }
    TextEditorSyncProtocol.prototype._configure = function () {
        var editor = this._editor;
        this._open();
        this._disposable.add(editor.onDidDestroy(_.bind(this._close, this)), editor.onDidSave(_.bind(this._save, this)));
        if (this._fullText) {
            this._disposable.add(editor.buffer.onDidChange(_.bind(this._fullTextChange, this)));
        }
        else {
            this._disposable.add(editor.buffer.onDidChange(_.bind(this._incrementalChange, this)));
        }
    };
    TextEditorSyncProtocol.prototype._fullTextChange = function () {
        var _this = this;
        this._version += 1;
        if (this._waitService.waiting) {
            this._pausedEvents.push(function () { return _this._fullTextChange(); });
            return;
        }
        this._documentDelayer.trigger(this._editor, function () {
            _this._client.sendNotification(protocol_1.DidChangeTextDocumentNotification.type, {
                textDocument: {
                    uri: convert_1.toUri(_this._editor),
                    version: _this._version
                },
                contentChanges: [{ text: _this._editor.getText() }]
            });
        });
    };
    TextEditorSyncProtocol.prototype._incrementalChange = function (change) {
        var _this = this;
        this._version += 1;
        if (change) {
            this._changes.push(change);
        }
        if (this._waitService.waiting) {
            this._pausedEvents.push(function () { return _this._incrementalChange(); });
            return;
        }
        this._documentDelayer.trigger(this._editor, function () {
            _this._client.sendNotification(protocol_1.DidChangeTextDocumentNotification.type, {
                textDocument: {
                    uri: convert_1.toUri(_this._editor),
                    version: _this._version
                },
                contentChanges: _.map(_this._changes.pop(), function (c) {
                    return {
                        range: convert_1.toRange(c.oldRange),
                        rangeLength: undefined,
                        text: c.newText
                    };
                })
            });
        });
    };
    TextEditorSyncProtocol.prototype._open = function () {
        var _this = this;
        if (this._waitService.waiting) {
            this._pausedEvents.push(function () { return _this._open(); });
            return;
        }
        var view = this._atomViewFinder.getView(this._editor);
        if (view && !view.classList.contains(constants_1.className)) {
            view.classList.add(constants_1.className);
        }
        this._client.sendNotification(protocol_1.DidOpenTextDocumentNotification.type, {
            textDocument: {
                uri: convert_1.toUri(this._editor),
                languageId: convert_1.getLanguageId(this._editor),
                version: this._version,
                text: this._editor.getText()
            }
        });
    };
    TextEditorSyncProtocol.prototype._close = function () {
        var _this = this;
        if (this._waitService.waiting) {
            this._pausedEvents.push(function () { return _this._close(); });
            return;
        }
        this._client.sendNotification(protocol_1.DidCloseTextDocumentNotification.type, {
            textDocument: convert_1.toTextDocumentIdentifier(this._editor)
        });
    };
    TextEditorSyncProtocol.prototype._save = function () {
        var _this = this;
        if (this._waitService.waiting) {
            this._pausedEvents.push(function () { return _this._save(); });
            return;
        }
        this._client.sendNotification(protocol_1.DidSaveTextDocumentNotification.type, {
            textDocument: convert_1.toTextDocumentIdentifier(this._editor)
        });
        this._fullTextChange();
    };
    return TextEditorSyncProtocol;
}(ts_disposables_1.DisposableBase));
exports.TextEditorSyncProtocol = TextEditorSyncProtocol;
//# sourceMappingURL=data:application/json;base64,