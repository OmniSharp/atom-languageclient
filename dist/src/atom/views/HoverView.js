"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  @license   MIT
 *  @copyright OmniSharp Team
 *  @summary   Adds support for https://github.com/Microsoft/language-server-protocol (and more!) to https://atom.io
 */
var _ = require('lodash');
var View_1 = require('./View');
var HoverView = (function (_super) {
    __extends(HoverView, _super);
    function HoverView() {
        var _this = this;
        _super.call(this, document.createElement('div'));
        this.root.classList.add('tooltip', 'atom-languageclient-tooltip');
        this._text = document.createElement('div');
        this._text.style.textAlign = 'left';
        this._text.classList.add('tooltip-inner');
        this.root.appendChild(this._text);
        document.body.appendChild(this.root);
        this._disposable.add(function () { return _this.root.remove(); });
    }
    Object.defineProperty(HoverView.prototype, "rect", {
        get: function () { return this._rect; },
        enumerable: true,
        configurable: true
    });
    HoverView.prototype.updateText = function (text, rect) {
        if (rect) {
            this._rect = rect;
        }
        /* tslint:disable-next-line:no-inner-html */
        this._text.innerHTML = text;
        this.updatePosition(this._rect);
    };
    HoverView.prototype.updatePosition = function (rect, editor) {
        if (editor) {
            var styles = window.getComputedStyle(editor);
            this.root.style.font = styles.font;
            this.root.style.maxWidth = _.min([parseFloat(styles.width) * 0.8, 500]) + "px";
        }
        this._rect = rect;
        var offset = 10;
        var left = rect.right;
        var top = rect.bottom;
        var right;
        // X axis adjust
        if (left + this.root.offsetWidth >= document.body.clientWidth) {
            left = document.body.clientWidth - this.root.offsetWidth - offset;
        }
        if (left < 0) {
            this._text.style.whiteSpace = 'pre-wrap';
            left = offset;
            right = offset;
        }
        // Y axis adjust
        if (top + this.root.offsetHeight >= document.body.clientHeight) {
            top = rect.top - this.root.offsetHeight;
        }
        this.root.style.left = left + "px";
        this.root.style.top = top + "px";
        if (right === undefined) {
            this.root.style.right = '';
        }
        else {
            this.root.style.right = right + "px";
        }
    };
    return HoverView;
}(View_1.View));
exports.HoverView = HoverView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSG92ZXJWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2F0b20vdmlld3MvSG92ZXJWaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0dBSUc7QUFDSCxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUM1QixxQkFBcUIsUUFBUSxDQUFDLENBQUE7QUFTOUI7SUFBK0IsNkJBQW9CO0lBSS9DO1FBSkosaUJBb0VDO1FBL0RPLGtCQUFNLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLDZCQUE2QixDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQ2hCLGNBQU0sT0FBQSxLQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFsQixDQUFrQixDQUMzQixDQUFDO0lBQ04sQ0FBQztJQUVELHNCQUFXLDJCQUFJO2FBQWYsY0FBb0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUlqQyw4QkFBVSxHQUFqQixVQUFrQixJQUFZLEVBQUUsSUFBcUI7UUFDakQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNQLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLENBQUM7UUFFRCw0Q0FBNEM7UUFDNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxrQ0FBYyxHQUFyQixVQUFzQixJQUFvQixFQUFFLE1BQWlDO1FBQ3pFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDVCxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBRSxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQU0sQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFJLENBQUM7UUFDckYsQ0FBQztRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdEIsSUFBSSxLQUF5QixDQUFDO1FBRTlCLGdCQUFnQjtRQUNoQixFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQzVELElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDdEUsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztZQUN6QyxJQUFJLEdBQUcsTUFBTSxDQUFDO1lBQ2QsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUNuQixDQUFDO1FBRUQsZ0JBQWdCO1FBQ2hCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDN0QsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDNUMsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBTSxJQUFJLE9BQUksQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQU0sR0FBRyxPQUFJLENBQUM7UUFDakMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUMvQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQU0sS0FBSyxPQUFJLENBQUM7UUFDekMsQ0FBQztJQUNMLENBQUM7SUFDTCxnQkFBQztBQUFELENBQUMsQUFwRUQsQ0FBK0IsV0FBSSxHQW9FbEM7QUFwRVksaUJBQVMsWUFvRXJCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEBsaWNlbnNlICAgTUlUXHJcbiAqICBAY29weXJpZ2h0IE9tbmlTaGFycCBUZWFtXHJcbiAqICBAc3VtbWFyeSAgIEFkZHMgc3VwcG9ydCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wgKGFuZCBtb3JlISkgdG8gaHR0cHM6Ly9hdG9tLmlvXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL1ZpZXcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSG92ZXJQb3NpdGlvbiB7XHJcbiAgICBsZWZ0OiBudW1iZXI7XHJcbiAgICByaWdodDogbnVtYmVyO1xyXG4gICAgdG9wOiBudW1iZXI7XHJcbiAgICBib3R0b206IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhvdmVyVmlldyBleHRlbmRzIFZpZXc8SFRNTERpdkVsZW1lbnQ+IHtcclxuICAgIHByaXZhdGUgX3JlY3Q6IElIb3ZlclBvc2l0aW9uO1xyXG4gICAgcHJpdmF0ZSBfdGV4dDogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCd0b29sdGlwJywgJ2F0b20tbGFuZ3VhZ2VjbGllbnQtdG9vbHRpcCcpO1xyXG4gICAgICAgIHRoaXMuX3RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLl90ZXh0LnN0eWxlLnRleHRBbGlnbiA9ICdsZWZ0JztcclxuICAgICAgICB0aGlzLl90ZXh0LmNsYXNzTGlzdC5hZGQoJ3Rvb2x0aXAtaW5uZXInKTtcclxuICAgICAgICB0aGlzLnJvb3QuYXBwZW5kQ2hpbGQodGhpcy5fdGV4dCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnJvb3QpO1xyXG5cclxuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlLmFkZChcclxuICAgICAgICAgICAgKCkgPT4gdGhpcy5yb290LnJlbW92ZSgpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHJlY3QoKSB7IHJldHVybiB0aGlzLl9yZWN0OyB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZVRleHQodGV4dDogc3RyaW5nKTogdm9pZFxyXG4gICAgcHVibGljIHVwZGF0ZVRleHQodGV4dDogc3RyaW5nLCByZWN0OiBJSG92ZXJQb3NpdGlvbik6IHZvaWQ7XHJcbiAgICBwdWJsaWMgdXBkYXRlVGV4dCh0ZXh0OiBzdHJpbmcsIHJlY3Q/OiBJSG92ZXJQb3NpdGlvbikge1xyXG4gICAgICAgIGlmIChyZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlY3QgPSByZWN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWlubmVyLWh0bWwgKi9cclxuICAgICAgICB0aGlzLl90ZXh0LmlubmVySFRNTCA9IHRleHQ7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbih0aGlzLl9yZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlUG9zaXRpb24ocmVjdDogSUhvdmVyUG9zaXRpb24sIGVkaXRvcj86IEF0b20uVGV4dEVkaXRvclByZXNlbnRlcikge1xyXG4gICAgICAgIGlmIChlZGl0b3IpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWRpdG9yKTtcclxuICAgICAgICAgICAgdGhpcy5yb290LnN0eWxlLmZvbnQgPSBzdHlsZXMuZm9udDtcclxuICAgICAgICAgICAgdGhpcy5yb290LnN0eWxlLm1heFdpZHRoID0gYCR7Xy5taW4oWyBwYXJzZUZsb2F0KHN0eWxlcy53aWR0aCEpICogMC44LCA1MDBdKX1weGA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3JlY3QgPSByZWN0O1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IDEwO1xyXG4gICAgICAgIGxldCBsZWZ0ID0gcmVjdC5yaWdodDtcclxuICAgICAgICBsZXQgdG9wID0gcmVjdC5ib3R0b207XHJcbiAgICAgICAgbGV0IHJpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIC8vIFggYXhpcyBhZGp1c3RcclxuICAgICAgICBpZiAobGVmdCArIHRoaXMucm9vdC5vZmZzZXRXaWR0aCA+PSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoKSB7XHJcbiAgICAgICAgICAgIGxlZnQgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIC0gdGhpcy5yb290Lm9mZnNldFdpZHRoIC0gb2Zmc2V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxlZnQgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHQuc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUtd3JhcCc7XHJcbiAgICAgICAgICAgIGxlZnQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJpZ2h0ID0gb2Zmc2V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gWSBheGlzIGFkanVzdFxyXG4gICAgICAgIGlmICh0b3AgKyB0aGlzLnJvb3Qub2Zmc2V0SGVpZ2h0ID49IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRvcCA9IHJlY3QudG9wIC0gdGhpcy5yb290Lm9mZnNldEhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucm9vdC5zdHlsZS5sZWZ0ID0gYCR7bGVmdH1weGA7XHJcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLnRvcCA9IGAke3RvcH1weGA7XHJcbiAgICAgICAgaWYgKHJpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnN0eWxlLnJpZ2h0ID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LnN0eWxlLnJpZ2h0ID0gYCR7cmlnaHR9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=