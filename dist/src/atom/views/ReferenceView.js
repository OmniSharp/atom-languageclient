"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *
 */
var _ = require('lodash');
var FilterSelectListView_1 = require('./FilterSelectListView');
var ReferenceView = (function (_super) {
    __extends(ReferenceView, _super);
    function ReferenceView(commands, navigation, results) {
        var _this = this;
        _super.call(this, commands);
        this._navigation = navigation;
        this.setFilterItems(results, this._filterEditorView.getModel().getText());
        this._filterEditorView.getModel().buffer.onDidChange(function () {
            _this.populateList(_this._filterEditorView.getModel().getText());
        });
        this.storeFocusedElement();
        this._panel = atom.workspace.addModalPanel({ item: this.root });
        this.focusFilterEditor();
        this._disposable.add(function () { return _this._panel.destroy(); });
    }
    Object.defineProperty(ReferenceView.prototype, "filterKeys", {
        get: function () {
            return [
                { name: 'filterText', weight: 0.3 },
                { name: 'filePath', weight: 0.2 },
                { name: 'name', weight: 0.5 }
            ];
        },
        enumerable: true,
        configurable: true
    });
    ReferenceView.prototype.cancelled = function () {
        this._panel.destroy();
    };
    ReferenceView.prototype.confirmed = function (item) {
        this._navigation.navigateTo(item);
    };
    ReferenceView.prototype.viewForItem = function (result) {
        var item = result.item, matches = result.matches;
        var lines = item.lines, range = item.range;
        var li = document.createElement('li');
        var filename = atom.project.relativizePath(item.filePath)[1];
        filename += ": " + item.range.start.column + "@" + item.range.start.row;
        var filenameContent = filename;
        var pathMatches = _.find(matches, { key: 'filePath' });
        if (pathMatches) {
            filenameContent = this._getMatchString(filenameContent, pathMatches);
        }
        /* tslint:disable-next-line:no-inner-html */
        li.innerHTML = "\n            " + this._getSymbolString(lines, range) + "\n            <span class=\"filename\">" + filenameContent + "</span>\n            ";
        return li;
    };
    ReferenceView.prototype._getSymbolString = function (lines, range) {
        var first = _.first(lines);
        var last = _.last(lines);
        if (first === last) {
            var text = first;
            var end_1 = range.end.column;
            var start_1 = range.start.column;
            var endStr_1 = text.substr(end_1 + 1);
            var replace = "<span class=\"character-match\">" + text.substr(start_1, end_1 - start_1 + 1) + "</span>";
            var startStr_1 = text.substr(0, start_1);
            return "" + startStr_1 + replace + endStr_1 + "<br/>";
        }
        var middle = _.map(lines.slice(1, -1), function (line) { return ("<span class=\"character-match\">" + line + "</span><br/>"); });
        var start = range.start.column;
        var startStr = first.substr(0, start);
        startStr = startStr + "<span class=\"character-match\">" + first.substr(start) + "</span><br/>";
        var end = range.end.column;
        var endStr = last.substr(end + 1);
        endStr = "<span class=\"character-match\">" + last.substr(0, start) + "</span>" + endStr + "<br/>";
        return [startStr].concat(middle, [endStr]).join('');
    };
    ReferenceView.prototype._getMatchString = function (text, match) {
        _.each(_.reverse(match.indices), function (_a) {
            var start = _a[0], end = _a[1];
            var endStr = text.substr(end + 1);
            var replace = "<span class=\"character-match\">" + text.substr(start, end - start + 1) + "</span>";
            var startStr = text.substr(0, start);
            text = "" + startStr + replace + endStr;
        });
        return text;
    };
    return ReferenceView;
}(FilterSelectListView_1.FilterSelectListView));
exports.ReferenceView = ReferenceView;
//# sourceMappingURL=data:application/json;base64,