"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *
 */
var _ = require('lodash');
var rxjs_1 = require('rxjs');
var View_1 = require('./View');
atom.themes.requireStylesheet(require.resolve('../../../styles/select-list.less'));
var SelectListView = (function (_super) {
    __extends(SelectListView, _super);
    function SelectListView(commands) {
        var _this = this;
        _super.call(this, document.createElement('div'));
        this._items = [];
        this._weakMap = new WeakMap();
        this._maxItems = Infinity;
        this._inputThrottle = 100;
        this._commands = commands;
        this._buildHtml();
        this._filterEditor = this._filterEditorView.getModel();
        this.storeFocusedElement();
        this._disposable.add(rxjs_1.Observable.fromEvent(this._filterEditorView, 'blur')
            .subscribe(function () {
            if (!document.hasFocus() && !_this._cancelling) {
                _this.cancel();
            }
        }), commands.add(this.root, {
            'core:move-up': function (event) {
                _this.selectPreviousItem();
                event.stopPropagation();
            },
            'core:move-down': function (event) {
                _this.selectNextItem();
                event.stopPropagation();
            },
            'core:move-to-top': function (event) {
                _this.selectFirstItem();
                _this.scrollToTop(_this._list);
                event.stopPropagation();
            },
            'core:move-to-bottom': function (event) {
                _this.selectLastItem();
                _this.scrollToBottom(_this._list);
                event.stopPropagation();
            },
            'core:confirm': function (event) {
                _this._confirmSelection();
                event.stopPropagation();
            },
            'core:cancel': function (event) {
                _this.cancel();
                event.stopPropagation();
            }
        }), rxjs_1.Observable.fromEvent(this._list, 'mousedown')
            .subscribe(function (e) {
            if (e.target.tagName.match(/li/i)) {
                _this._selectItem(e.target);
                e.preventDefault();
                return false;
            }
            return;
        }), rxjs_1.Observable.fromEvent(this._list, 'mouseup')
            .subscribe(function (e) {
            if (e.target.tagName.match(/li/i)) {
                if (e.target.classList.contains('selected')) {
                    _this._confirmSelection();
                }
                e.preventDefault();
                return false;
            }
            return;
        }), rxjs_1.Observable.fromEvent(this._list, 'mousedown')
            .subscribe(function (_a) {
            var target = _a.target;
            if (target === _this._list) {
                return false;
            }
            return;
        }));
    }
    SelectListView.prototype.setItems = function (items) {
        this._items = items != null ? items : [];
        this.populateList();
        return this.setLoading();
    };
    Object.defineProperty(SelectListView.prototype, "selected", {
        get: function () {
            return this._weakMap.get(this._getSelectedItem());
        },
        enumerable: true,
        configurable: true
    });
    SelectListView.prototype.getFilterQuery = function () {
        return this._filterEditor.getText();
    };
    SelectListView.prototype.setMaxItems = function (maxItems) {
        this._maxItems = maxItems;
    };
    SelectListView.prototype.populateList = function () {
        this.populateItems(_.map(this._items, function (item) { return ({ item: item }); }));
    };
    SelectListView.prototype.populateItems = function (items) {
        if (items == null) {
            return;
        }
        /* tslint:disable-next-line:no-inner-html */
        this._list.innerHTML = '';
        if (items.length) {
            this.setError(undefined);
            for (var _i = 0, _a = _.take(items, _.min([items.length, this._maxItems])); _i < _a.length; _i++) {
                var item = _a[_i];
                var view = this.viewForItem(item);
                this._weakMap.set(view, item.item);
                this._list.appendChild(view);
            }
            return this._selectItem(this._list.firstElementChild);
        }
        else {
            return this.setError(this.getEmptyMessage(this._items.length, items.length));
        }
    };
    SelectListView.prototype.setError = function (message) {
        if (message == null) {
            message = '';
        }
        if (message.length === 0) {
            this._error.innerText = '';
            this.hide(this._error);
        }
        else {
            this.setLoading();
            this._error.innerText = message;
            this.show(this._error);
        }
    };
    SelectListView.prototype.setLoading = function (message) {
        if (message == null) {
            message = '';
        }
        if (message.length === 0) {
            this._loading.innerText = '';
            this._loadingBadge.innerText = '';
            return this.hide(this._loadingArea);
        }
        else {
            this.setError();
            this._loading.innerText = message;
            return this.show(this._loadingArea);
        }
    };
    SelectListView.prototype.getEmptyMessage = function (itemCount, filteredItemCount) {
        return 'No matches found';
    };
    /*
    Section: View Actions
     */
    SelectListView.prototype.cancel = function () {
        this.empty(this._list);
        this._cancelling = true;
        var filterEditorViewFocused = this.hasFocus(this._filterEditorView);
        this.cancelled();
        this._filterEditor.setText('');
        if (filterEditorViewFocused) {
            this._restoreFocus();
        }
        this._cancelling = false;
        clearTimeout(this._scheduleTimeout);
        this.dispose();
    };
    SelectListView.prototype.focusFilterEditor = function () {
        return this._filterEditorView.focus();
    };
    SelectListView.prototype.storeFocusedElement = function () {
        /* tslint:disable-next-line:no-any */
        return this._previouslyFocusedElement = document.activeElement;
    };
    SelectListView.prototype.selectFirstItem = function () {
        return this._selectItem(this._list.firstElementChild);
    };
    SelectListView.prototype.selectLastItem = function () {
        return this._selectItem(this._list.lastElementChild);
    };
    SelectListView.prototype.selectPreviousItem = function () {
        var view = this._getSelectedItem().previousElementSibling;
        if (!view) {
            view = this._list.lastElementChild;
        }
        return this._selectItem(view);
    };
    SelectListView.prototype.selectNextItem = function () {
        var view = this._getSelectedItem().nextElementSibling;
        if (!view) {
            view = this._list.firstElementChild;
        }
        return this._selectItem(view);
    };
    SelectListView.prototype._selectItem = function (view) {
        var selected = this._list.querySelector('.selected');
        if (selected) {
            selected.classList.remove('selected');
        }
        view.classList.add('selected');
        return this._scrollToItem(view);
    };
    SelectListView.prototype._scrollToItem = function (view) {
        var scrollTop = this._list.scrollTop;
        var desiredTop = view.getBoundingClientRect().top + scrollTop;
        var desiredBottom = desiredTop + view.clientHeight;
        if (desiredTop < scrollTop) {
            this._list.scrollTop = desiredTop;
        }
        else if (desiredBottom > this.scrollBottom(this._list)) {
            this.scrollBottom(this._list, desiredBottom);
        }
    };
    SelectListView.prototype._restoreFocus = function () {
        if (this._previouslyFocusedElement) {
            this._previouslyFocusedElement.focus();
        }
    };
    SelectListView.prototype._getSelectedItem = function () {
        return this._list.querySelector('li.selected');
    };
    SelectListView.prototype._confirmSelection = function () {
        var item = this.selected;
        if (item != null) {
            this.confirmed(item);
            var filterEditorViewFocused = this.hasFocus(this._filterEditorView);
            if (filterEditorViewFocused) {
                this._restoreFocus();
            }
            this.dispose();
        }
        else {
            this.cancel();
        }
    };
    SelectListView.prototype.schedulePopulateList = function () {
        var _this = this;
        clearTimeout(this._scheduleTimeout);
        var populateCallback = function () {
            if (document.body.contains(_this.root)) {
                return _this.populateList();
            }
        };
        this._scheduleTimeout = setTimeout(populateCallback, this._inputThrottle);
    };
    SelectListView.prototype._buildHtml = function () {
        this.root.classList.add('select-list');
        /* tslint:disable-next-line:no-any */
        var editor = this._filterEditorView = document.createElement('atom-text-editor');
        /* tslint:disable-next-line:no-any */
        editor.setAttribute('mini', true);
        var errorMessage = this._error = document.createElement('div');
        errorMessage.classList.add('error-message');
        var loading = this._loadingArea = document.createElement('div');
        loading.classList.add('loading');
        var loadingMessage = this._loading = document.createElement('span');
        loadingMessage.classList.add('loading-message');
        var loadingBadge = this._loadingBadge = document.createElement('span');
        loadingBadge.classList.add('badge');
        var listGroup = this._list = document.createElement('ol');
        listGroup.classList.add('list-group');
        this.root.appendChild(editor);
        this.root.appendChild(errorMessage);
        this.root.appendChild(loading);
        loading.appendChild(loadingMessage);
        loading.appendChild(loadingBadge);
        this.root.appendChild(listGroup);
    };
    return SelectListView;
}(View_1.View));
exports.SelectListView = SelectListView;
//# sourceMappingURL=data:application/json;base64,