"use strict";
/**
 *  @license   MIT
 *  @copyright OmniSharp Team
 *  @summary   Adds support for https://github.com/Microsoft/language-server-protocol (and more!) to https://atom.io
 */
var _ = require('lodash');
var rxjs_1 = require('rxjs');
var atom_languageservices_1 = require('atom-languageservices');
var fs_1 = require('fs');
var path_1 = require('path');
var ts_disposables_1 = require('ts-disposables');
var index_1 = require('./atom/index');
var index_2 = require('./language/index');
var AtomLanguageClientSettings_1 = require('./AtomLanguageClientSettings');
var Container_1 = require('./di/Container');
var $readdir = rxjs_1.Observable.bindNodeCallback(fs_1.readdir);
var AtomLanguageClientPackage = (function () {
    function AtomLanguageClientPackage() {
    }
    /* tslint:disable:no-any */
    AtomLanguageClientPackage.prototype.activate = function (settings) {
        var _this = this;
        this._container = new Container_1.Container();
        this._disposable = new ts_disposables_1.CompositeDisposable();
        this._settings = settings instanceof AtomLanguageClientSettings_1.AtomLanguageClientSettings ? settings : new AtomLanguageClientSettings_1.AtomLanguageClientSettings(settings);
        this._atomLanguageProvider = new index_2.LanguageProvider(this._container);
        this._atomLanguageService = new index_2.LanguageService(this._container);
        this._atomAutocompleteProvider = new index_1.AutocompleteService();
        this._atomLinterProvider = new index_1.LinterService();
        this._container.registerInstance(index_2.LanguageProvider, this._atomLanguageProvider);
        this._container.registerAlias(index_2.LanguageProvider, atom_languageservices_1.ILanguageProvider);
        this._container.registerInstance(index_2.LanguageService, this._atomLanguageService);
        this._container.registerAlias(index_2.LanguageService, atom_languageservices_1.ILanguageService);
        this._container.registerInstance(index_1.AutocompleteService, this._atomAutocompleteProvider);
        this._container.registerAlias(index_1.AutocompleteService, atom_languageservices_1.IAutocompleteService);
        this._container.registerInstance(index_1.LinterService, this._atomLinterProvider);
        this._container.registerAlias(index_1.LinterService, atom_languageservices_1.ILinterService);
        this._disposable.add(this._container, this._atomLanguageProvider, this._atomLanguageService);
        var activateServices = rxjs_1.Observable.merge(this._container.registerFolder(__dirname, 'atom'), this._container.registerFolder(__dirname, 'capabilities'), this._container.registerFolder(__dirname, 'services'))
            .toPromise()
            .then(function () {
            _this._container.registerInterfaceSymbols();
        });
        this.activated = activateServices;
        /* We're going to pretend to load these packages, as if they were real */
        var pathToPlugins = path_1.resolve(__dirname, '../', 'plugins');
        this.activated.then(function () {
            $readdir(pathToPlugins)
                .mergeMap(function (folders) {
                return rxjs_1.Observable.from(folders)
                    .mergeMap(function (folder) { return $readdir(path_1.join(pathToPlugins, folder))
                    .mergeMap(function (files) { return files; })
                    .filter(function (x) { return _.endsWith(x, 'Package.ts'); })
                    .map(function (x) { return path_1.join(pathToPlugins, folder, _.trimEnd(x, '.ts')); }); })
                    .map(function (path) { return require(path); })
                    .map(function (module) {
                    var cls = _.find(module, _.isFunction);
                    return new cls();
                })
                    .map(function (instance) {
                    if (instance['consume-atom-language-client']) {
                        instance['consume-atom-language-client'](_this._atomLanguageService);
                    }
                    if (instance['provide-atom-language']) {
                        _this['consume-atom-language'](instance['provide-atom-language']());
                    }
                });
            })
                .subscribe();
        });
    };
    /* tslint:disable-next-line:function-name */
    AtomLanguageClientPackage.prototype['provide-atom-language-client'] = function () {
        return this._atomLanguageService;
    };
    /* tslint:disable-next-line:function-name */
    AtomLanguageClientPackage.prototype['provide-atom-autocomplete'] = function () {
        return [this._atomAutocompleteProvider];
    };
    /* tslint:disable-next-line:function-name */
    AtomLanguageClientPackage.prototype['consume-atom-language'] = function (services) {
        var _this = this;
        if (_.isArray(services)) {
            _.each(services, function (service) {
                _this._atomLanguageProvider.add(service);
                if (ts_disposables_1.isDisposable(service)) {
                    _this._disposable.add(service);
                }
            });
        }
        else {
            this._atomLanguageProvider.add(services);
            if (ts_disposables_1.isDisposable(services)) {
                this._disposable.add(services);
            }
        }
    };
    /* tslint:disable-next-line:function-name */
    AtomLanguageClientPackage.prototype['consume-atom-linter'] = function (service) {
        this._atomLinterProvider.registry = service;
    };
    /* tslint:disable-next-line:no-any */
    AtomLanguageClientPackage.deserialize = function (state) {
        return new AtomLanguageClientSettings_1.AtomLanguageClientSettings(state);
    };
    AtomLanguageClientPackage.prototype.serialize = function () {
        return this._settings.serialize(AtomLanguageClientPackage);
    };
    AtomLanguageClientPackage.prototype.deactivate = function () {
        this._disposable.dispose();
    };
    Object.defineProperty(AtomLanguageClientPackage, "version", {
        get: function () { return 1; },
        enumerable: true,
        configurable: true
    });
    return AtomLanguageClientPackage;
}());
exports.AtomLanguageClientPackage = AtomLanguageClientPackage;
atom.deserializers.add(AtomLanguageClientPackage);
//# sourceMappingURL=data:application/json;base64,