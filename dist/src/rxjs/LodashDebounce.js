"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  @license   MIT
 *  @copyright OmniSharp Team
 *  @summary   Adds support for https://github.com/Microsoft/language-server-protocol (and more!) to https://atom.io
 */
/* tslint:disable:no-any */
var lodash_1 = require('lodash');
var Observable_1 = require('rxjs/Observable');
var Subscriber_1 = require('rxjs/Subscriber');
function lodashDebounce(duration, options) {
    return this.lift(new LodashDebounceOperator(duration, options || {}));
}
exports.lodashDebounce = lodashDebounce;
Observable_1.Observable.prototype.lodashDebounce = lodashDebounce;
var LodashDebounceOperator = (function () {
    function LodashDebounceOperator(duration, options) {
        this._duration = duration;
        this._options = options;
    }
    LodashDebounceOperator.prototype.call = function (subscriber, source) {
        return source._subscribe(new LodashDebounceSubscriber(subscriber, this._duration, this._options));
    };
    return LodashDebounceOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var LodashDebounceSubscriber = (function (_super) {
    __extends(LodashDebounceSubscriber, _super);
    function LodashDebounceSubscriber(destination, duration, options) {
        _super.call(this, destination);
        this._duration = duration;
        this._method = lodash_1.debounce(lodash_1.bind(this._dispatchNext, this), duration, options);
    }
    /* tslint:disable-next-line */
    LodashDebounceSubscriber.prototype._next = function (value) {
        this._method(value);
    };
    LodashDebounceSubscriber.prototype._dispatchNext = function (value) {
        if (this.closed) {
            return;
        }
        this.destination.next(value);
    };
    return LodashDebounceSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9kYXNoRGVib3VuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcnhqcy9Mb2Rhc2hEZWJvdW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztHQUlHO0FBQ0gsMkJBQTJCO0FBQzNCLHVCQUFnRCxRQUFRLENBQUMsQ0FBQTtBQUN6RCwyQkFBMkIsaUJBQWlCLENBQUMsQ0FBQTtBQUU3QywyQkFBMkIsaUJBQWlCLENBQUMsQ0FBQTtBQUc3Qyx3QkFBdUQsUUFBZ0IsRUFBRSxPQUF5QjtJQUM5RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFzQixDQUFJLFFBQVEsRUFBRSxPQUFPLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRmUsc0JBQWMsaUJBRTdCLENBQUE7QUFTRCx1QkFBVSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBRXJEO0lBR0ksZ0NBQVksUUFBZ0IsRUFBRSxPQUF3QjtRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUM1QixDQUFDO0lBRU0scUNBQUksR0FBWCxVQUFZLFVBQXlCLEVBQUUsTUFBVztRQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLHdCQUF3QixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3RHLENBQUM7SUFDTCw2QkFBQztBQUFELENBQUMsQUFYRCxJQVdDO0FBRUQ7Ozs7R0FJRztBQUNIO0lBQTBDLDRDQUFhO0lBSW5ELGtDQUFZLFdBQTBCLEVBQUUsUUFBZ0IsRUFBRSxPQUF3QjtRQUM5RSxrQkFBTSxXQUFXLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFRLENBQUMsYUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCw4QkFBOEI7SUFDcEIsd0NBQUssR0FBZixVQUFnQixLQUFRO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVPLGdEQUFhLEdBQXJCLFVBQXNCLEtBQVE7UUFDMUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLENBQUM7UUFDWCxDQUFDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNMLCtCQUFDO0FBQUQsQ0FBQyxBQXJCRCxDQUEwQyx1QkFBVSxHQXFCbkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEBsaWNlbnNlICAgTUlUXHJcbiAqICBAY29weXJpZ2h0IE9tbmlTaGFycCBUZWFtXHJcbiAqICBAc3VtbWFyeSAgIEFkZHMgc3VwcG9ydCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wgKGFuZCBtb3JlISkgdG8gaHR0cHM6Ly9hdG9tLmlvXHJcbiAqL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1hbnkgKi9cclxuaW1wb3J0IHsgRGVib3VuY2VPcHRpb25zLCBiaW5kLCBkZWJvdW5jZSB9IGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBPcGVyYXRvciB9IGZyb20gJ3J4anMvT3BlcmF0b3InO1xyXG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAncnhqcy9TdWJzY3JpYmVyJztcclxuaW1wb3J0IHsgVGVhcmRvd25Mb2dpYyB9IGZyb20gJ3J4anMvU3Vic2NyaXB0aW9uJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2Rhc2hEZWJvdW5jZTxUPih0aGlzOiBPYnNlcnZhYmxlPFQ+LCBkdXJhdGlvbjogbnVtYmVyLCBvcHRpb25zPzogRGVib3VuY2VPcHRpb25zKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBMb2Rhc2hEZWJvdW5jZU9wZXJhdG9yPFQ+KGR1cmF0aW9uLCBvcHRpb25zIHx8IHt9KSk7XHJcbn1cclxuXHJcbmRlY2xhcmUgbW9kdWxlICdyeGpzL09ic2VydmFibGUnIHtcclxuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTppbnRlcmZhY2UtbmFtZSAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlPFQ+IHtcclxuICAgICAgICBsb2Rhc2hEZWJvdW5jZTogdHlwZW9mIGxvZGFzaERlYm91bmNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5sb2Rhc2hEZWJvdW5jZSA9IGxvZGFzaERlYm91bmNlO1xyXG5cclxuY2xhc3MgTG9kYXNoRGVib3VuY2VPcGVyYXRvcjxUPiBpbXBsZW1lbnRzIE9wZXJhdG9yPFQsIFQ+IHtcclxuICAgIHByaXZhdGUgX2R1cmF0aW9uOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9vcHRpb25zOiBEZWJvdW5jZU9wdGlvbnM7XHJcbiAgICBjb25zdHJ1Y3RvcihkdXJhdGlvbjogbnVtYmVyLCBvcHRpb25zOiBEZWJvdW5jZU9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjYWxsKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4sIHNvdXJjZTogYW55KTogVGVhcmRvd25Mb2dpYyB7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5fc3Vic2NyaWJlKG5ldyBMb2Rhc2hEZWJvdW5jZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5fZHVyYXRpb24sIHRoaXMuX29wdGlvbnMpKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXHJcbiAqIEBpZ25vcmVcclxuICogQGV4dGVuZHMge0lnbm9yZWR9XHJcbiAqL1xyXG5jbGFzcyBMb2Rhc2hEZWJvdW5jZVN1YnNjcmliZXI8VD4gZXh0ZW5kcyBTdWJzY3JpYmVyPFQ+IHtcclxuICAgIHByaXZhdGUgX21ldGhvZDogKHZhbHVlOiBUKSA9PiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfZHVyYXRpb246IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkZXN0aW5hdGlvbjogU3Vic2NyaWJlcjxUPiwgZHVyYXRpb246IG51bWJlciwgb3B0aW9uczogRGVib3VuY2VPcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoZGVzdGluYXRpb24pO1xyXG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb247XHJcbiAgICAgICAgdGhpcy5fbWV0aG9kID0gZGVib3VuY2UoYmluZCh0aGlzLl9kaXNwYXRjaE5leHQsIHRoaXMpLCBkdXJhdGlvbiwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lICovXHJcbiAgICBwcm90ZWN0ZWQgX25leHQodmFsdWU6IFQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9tZXRob2QodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2Rpc3BhdGNoTmV4dCh2YWx1ZTogVCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCEodmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==