"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  @license   MIT
 *  @copyright OmniSharp Team
 *  @summary   Adds support for https://github.com/Microsoft/language-server-protocol (and more!) to https://atom.io
 */
/* tslint:disable:no-any */
var lodash_1 = require('lodash');
var Observable_1 = require('rxjs/Observable');
var Subscriber_1 = require('rxjs/Subscriber');
function lodashThrottle(duration, options) {
    return this.lift(new LodashThrottleOperator(duration, options || {}));
}
exports.lodashThrottle = lodashThrottle;
Observable_1.Observable.prototype.lodashThrottle = lodashThrottle;
var LodashThrottleOperator = (function () {
    function LodashThrottleOperator(duration, options) {
        this._duration = duration;
        this._options = options;
    }
    LodashThrottleOperator.prototype.call = function (subscriber, source) {
        return source._subscribe(new LodashThrottleSubscriber(subscriber, this._duration, this._options));
    };
    return LodashThrottleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var LodashThrottleSubscriber = (function (_super) {
    __extends(LodashThrottleSubscriber, _super);
    function LodashThrottleSubscriber(destination, duration, options) {
        _super.call(this, destination);
        this._duration = duration;
        this._method = lodash_1.throttle(lodash_1.bind(this._dispatchNext, this), duration, options);
    }
    /* tslint:disable-next-line */
    LodashThrottleSubscriber.prototype._next = function (value) {
        this._method(value);
    };
    LodashThrottleSubscriber.prototype._dispatchNext = function (value) {
        if (this.closed) {
            return;
        }
        this.destination.next(value);
    };
    return LodashThrottleSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9kYXNoVGhyb3R0bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcnhqcy9Mb2Rhc2hUaHJvdHRsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztHQUlHO0FBQ0gsMkJBQTJCO0FBQzNCLHVCQUFnRCxRQUFRLENBQUMsQ0FBQTtBQUN6RCwyQkFBMkIsaUJBQWlCLENBQUMsQ0FBQTtBQUU3QywyQkFBMkIsaUJBQWlCLENBQUMsQ0FBQTtBQUs3Qyx3QkFBdUQsUUFBZ0IsRUFBRSxPQUF5QjtJQUM5RixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFzQixDQUFJLFFBQVEsRUFBRSxPQUFPLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRmUsc0JBQWMsaUJBRTdCLENBQUE7QUFTRCx1QkFBVSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBRXJEO0lBR0ksZ0NBQVksUUFBZ0IsRUFBRSxPQUF3QjtRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUM1QixDQUFDO0lBRU0scUNBQUksR0FBWCxVQUFZLFVBQXlCLEVBQUUsTUFBVztRQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLHdCQUF3QixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3RHLENBQUM7SUFDTCw2QkFBQztBQUFELENBQUMsQUFYRCxJQVdDO0FBRUQ7Ozs7R0FJRztBQUNIO0lBQTBDLDRDQUFhO0lBSW5ELGtDQUFZLFdBQTBCLEVBQUUsUUFBZ0IsRUFBRSxPQUF3QjtRQUM5RSxrQkFBTSxXQUFXLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFRLENBQUMsYUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCw4QkFBOEI7SUFDcEIsd0NBQUssR0FBZixVQUFnQixLQUFRO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVPLGdEQUFhLEdBQXJCLFVBQXNCLEtBQVE7UUFDMUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLENBQUM7UUFDWCxDQUFDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNMLCtCQUFDO0FBQUQsQ0FBQyxBQXJCRCxDQUEwQyx1QkFBVSxHQXFCbkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEBsaWNlbnNlICAgTUlUXHJcbiAqICBAY29weXJpZ2h0IE9tbmlTaGFycCBUZWFtXHJcbiAqICBAc3VtbWFyeSAgIEFkZHMgc3VwcG9ydCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wgKGFuZCBtb3JlISkgdG8gaHR0cHM6Ly9hdG9tLmlvXHJcbiAqL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1hbnkgKi9cclxuaW1wb3J0IHsgVGhyb3R0bGVPcHRpb25zLCBiaW5kLCB0aHJvdHRsZSB9IGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBPcGVyYXRvciB9IGZyb20gJ3J4anMvT3BlcmF0b3InO1xyXG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAncnhqcy9TdWJzY3JpYmVyJztcclxuaW1wb3J0IHsgVGVhcmRvd25Mb2dpYyB9IGZyb20gJ3J4anMvU3Vic2NyaXB0aW9uJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2Rhc2hUaHJvdHRsZTxUPih0aGlzOiBPYnNlcnZhYmxlPFQ+LCBkdXJhdGlvbjogbnVtYmVyKTogT2JzZXJ2YWJsZTxUPjtcclxuZXhwb3J0IGZ1bmN0aW9uIGxvZGFzaFRocm90dGxlPFQ+KHRoaXM6IE9ic2VydmFibGU8VD4sIGR1cmF0aW9uOiBudW1iZXIsIG9wdGlvbnM6IFRocm90dGxlT3B0aW9ucyk6IE9ic2VydmFibGU8VD47XHJcbmV4cG9ydCBmdW5jdGlvbiBsb2Rhc2hUaHJvdHRsZTxUPih0aGlzOiBPYnNlcnZhYmxlPFQ+LCBkdXJhdGlvbjogbnVtYmVyLCBvcHRpb25zPzogVGhyb3R0bGVPcHRpb25zKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBMb2Rhc2hUaHJvdHRsZU9wZXJhdG9yPFQ+KGR1cmF0aW9uLCBvcHRpb25zIHx8IHt9KSk7XHJcbn1cclxuXHJcbmRlY2xhcmUgbW9kdWxlICdyeGpzL09ic2VydmFibGUnIHtcclxuLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmludGVyZmFjZS1uYW1lICovXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIE9ic2VydmFibGU8VD4ge1xyXG4gICAgICAgIGxvZGFzaFRocm90dGxlOiB0eXBlb2YgbG9kYXNoVGhyb3R0bGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbk9ic2VydmFibGUucHJvdG90eXBlLmxvZGFzaFRocm90dGxlID0gbG9kYXNoVGhyb3R0bGU7XHJcblxyXG5jbGFzcyBMb2Rhc2hUaHJvdHRsZU9wZXJhdG9yPFQ+IGltcGxlbWVudHMgT3BlcmF0b3I8VCwgVD4ge1xyXG4gICAgcHJpdmF0ZSBfZHVyYXRpb246IG51bWJlcjtcclxuICAgIHByaXZhdGUgX29wdGlvbnM6IFRocm90dGxlT3B0aW9ucztcclxuICAgIGNvbnN0cnVjdG9yKGR1cmF0aW9uOiBudW1iZXIsIG9wdGlvbnM6IFRocm90dGxlT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb247XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNhbGwoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPiwgc291cmNlOiBhbnkpOiBUZWFyZG93bkxvZ2ljIHtcclxuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IExvZGFzaFRocm90dGxlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLl9kdXJhdGlvbiwgdGhpcy5fb3B0aW9ucykpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cclxuICogQGlnbm9yZVxyXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cclxuICovXHJcbmNsYXNzIExvZGFzaFRocm90dGxlU3Vic2NyaWJlcjxUPiBleHRlbmRzIFN1YnNjcmliZXI8VD4ge1xyXG4gICAgcHJpdmF0ZSBfbWV0aG9kOiAodmFsdWU6IFQpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIF9kdXJhdGlvbjogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRlc3RpbmF0aW9uOiBTdWJzY3JpYmVyPFQ+LCBkdXJhdGlvbjogbnVtYmVyLCBvcHRpb25zOiBUaHJvdHRsZU9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihkZXN0aW5hdGlvbik7XHJcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBkdXJhdGlvbjtcclxuICAgICAgICB0aGlzLl9tZXRob2QgPSB0aHJvdHRsZShiaW5kKHRoaXMuX2Rpc3BhdGNoTmV4dCwgdGhpcyksIGR1cmF0aW9uLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cclxuICAgIHByb3RlY3RlZCBfbmV4dCh2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX21ldGhvZCh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZGlzcGF0Y2hOZXh0KHZhbHVlOiBUKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0ISh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuIl19