"use strict";
/**
 *  @license   MIT
 *  @copyright OmniSharp Team
 *  @summary   Adds support for https://github.com/Microsoft/language-server-protocol (and more!) to https://atom.io
 */
/* tslint:disable:no-any */
var _ = require('lodash');
var atom_languageservices_1 = require('atom-languageservices');
/* tslint:disable */
var protocol_1 = require('atom-languageservices/protocol');
/* tslint:enable */
/* tslint:disable:no-any */
var child_process_1 = require('child_process');
var vscode_jsonrpc_1 = require('vscode-jsonrpc');
var electron_1 = require('./utils/electron');
var ConsoleLogger_1 = require('./ConsoleLogger');
var isDefined = _.negate(_.isUndefined);
/* tslint:disable-next-line:variable-name */
exports.IConnection = Symbol.for('IConnection');
function isStdioConnection(options) {
    return options.input && options.output;
}
function getEnvironment(env) {
    if (!env) {
        return process.env;
    }
    var result = Object.create(null);
    Object.keys(process.env).forEach(function (key) { return result[key] = process.env[key]; });
    Object.keys(env).forEach(function (key) { return result[key] = env[key]; });
}
var Connection = (function () {
    function Connection(options) {
        var input;
        var output;
        var closeHandler = options.closeHandler, errorHandler = options.errorHandler, process = options.process;
        if (process) {
            this._process = process;
        }
        if (isStdioConnection(options)) {
            input = options.input;
            output = options.output;
        }
        else {
            input = options.reader;
            output = options.writer;
        }
        var logger = new ConsoleLogger_1.ConsoleLogger();
        var connection = vscode_jsonrpc_1.createClientMessageConnection(input, output, logger);
        this._connection = connection;
        connection.onError(function (data) { errorHandler(data[0], data[1], data[2]); });
        connection.onClose(closeHandler);
    }
    Connection.create = function (server, opts, debug) {
        if (debug === void 0) { debug = false; }
        // We got a function.
        if (_.isFunction(server)) {
            return server().then(function (result) {
                var info = result;
                if (info.writer && info.reader) {
                    return new Connection(_.assign({}, opts, { input: info.reader, output: info.writer }));
                }
                else {
                    var cp = result;
                    return new Connection(_.assign({}, opts, { input: cp.stdout, output: cp.stdin, process: cp }));
                }
            });
        }
        var json;
        var runDebug = server;
        if (isDefined(runDebug.run) || isDefined(runDebug.debug)) {
            // We are under debugging. So use debug as well.
            if (typeof v8debug === 'object' || debug) {
                json = runDebug.debug;
            }
            else {
                json = runDebug.run;
            }
        }
        else {
            json = server;
        }
        if (isDefined(json.module)) {
            var node_1 = json;
            if (node_1.runtime) {
                var args_1 = [];
                var options = node_1.options || Object.create(null);
                if (options.execArgv) {
                    options.execArgv.forEach(function (element) { return args_1.push(element); });
                }
                args_1.push(node_1.module);
                if (node_1.args) {
                    node_1.args.forEach(function (element) { return args_1.push(element); });
                }
                var execOptions = Object.create(null);
                execOptions.cwd = options.cwd || atom.project.getPaths()[0];
                execOptions.env = getEnvironment(options.env);
                if (node_1.transport === atom_languageservices_1.TransportKind.ipc) {
                    execOptions.stdio = [null, null, null, 'ipc'];
                }
                var process_1 = child_process_1.spawn(node_1.runtime, args_1, execOptions);
                if (!process_1 || !process_1.pid) {
                    return Promise.reject("Launching server using runtime " + node_1.runtime + " failed.");
                }
                // A spawned process doesn't have ipc transport even if we spawn node. For now always use stdio communication.
                if (node_1.transport === atom_languageservices_1.TransportKind.ipc) {
                    process_1.stdout.on('data', function (data) { return opts.output(data.toString()); });
                    process_1.stderr.on('data', function (data) { return opts.output(data.toString()); });
                    var reader = new vscode_jsonrpc_1.IPCMessageReader(process_1);
                    var writer = new vscode_jsonrpc_1.IPCMessageWriter(process_1);
                    return Promise.resolve(new Connection(_.assign({}, opts, { reader: reader, writer: writer, process: process_1 })));
                }
                else {
                    return Promise.resolve(new Connection(_.assign({}, opts, { input: process_1.stdout, output: process_1.stdin })));
                }
            }
            else {
                return new Promise(function (resolve, reject) {
                    var options = node_1.options || Object.create(null);
                    options.execArgv = options.execArgv || [];
                    options.cwd = options.cwd || atom.project.getPaths()[0];
                    electron_1.fork(node_1.module, node_1.args || [], options, function (error, cp) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (node_1.transport === atom_languageservices_1.TransportKind.ipc) {
                                cp.stdout.on('data', function (data) {
                                    opts.output(data.toString());
                                });
                                var reader = new vscode_jsonrpc_1.IPCMessageReader(cp);
                                var writer = new vscode_jsonrpc_1.IPCMessageWriter(cp);
                                resolve(new Connection(_.assign({}, opts, { reader: reader, writer: writer, process: cp })));
                            }
                            else {
                                resolve(new Connection(_.assign({}, opts, { input: cp.stdout, output: cp.stdin })));
                            }
                        }
                    });
                });
            }
        }
        else if (isDefined(json.command)) {
            var command = json;
            var options = command.options || {};
            options.cwd = options.cwd || atom.project.getPaths()[0];
            var process_2 = child_process_1.spawn(command.command, command.args, command.options);
            return Promise.resolve(new Connection(_.assign({}, opts, { input: process_2.stdout, output: process_2.stdin, process: process_2 })));
        }
        return Promise.reject(new Error("Unsupported server configuartion " + JSON.stringify(server, null, 4)));
    };
    Object.defineProperty(Connection.prototype, "settings", {
        get: function () { return this._settings; },
        enumerable: true,
        configurable: true
    });
    Connection.prototype.connection = function () {
        return this._connection;
    };
    Connection.prototype.listen = function () {
        this._connection.listen();
    };
    Connection.prototype.sendRequest = function (type, params, token) {
        return this._connection.sendRequest(type, params, token);
    };
    Connection.prototype.sendNotification = function (type, params) {
        this._connection.sendNotification(type, params);
    };
    Connection.prototype.onNotification = function (type, handler) {
        this._connection.onNotification(type, handler);
    };
    Connection.prototype.onRequest = function (type, handler) {
        this._connection.onRequest(type, handler);
    };
    Connection.prototype.trace = function (value, tracer) {
        this._connection.trace(value, tracer);
    };
    Connection.prototype.initialize = function (params) {
        var _this = this;
        return this._connection.sendRequest(protocol_1.InitializeRequest.type, params)
            .then(function (x) { return _this._settings = x; });
    };
    Connection.prototype.shutdown = function () {
        return this._connection.sendRequest(protocol_1.ShutdownRequest.type, undefined);
    };
    Connection.prototype.exit = function () {
        this._connection.sendNotification(protocol_1.ExitNotification.type);
    };
    Connection.prototype.onLogMessage = function (handler) {
        this._connection.onNotification(protocol_1.LogMessageNotification.type, handler);
    };
    Connection.prototype.onShowMessage = function (handler) {
        this._connection.onNotification(protocol_1.ShowMessageNotification.type, handler);
    };
    Connection.prototype.onTelemetry = function (handler) {
        this._connection.onNotification(protocol_1.TelemetryEventNotification.type, handler);
    };
    Connection.prototype.dispose = function () {
        this._connection.dispose();
    };
    return Connection;
}());
exports.Connection = Connection;
//# sourceMappingURL=data:application/json;base64,