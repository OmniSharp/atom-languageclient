"use strict";
/**
 *  @license   MIT
 *  @copyright OmniSharp Team
 *  @summary   Adds support for https://github.com/Microsoft/language-server-protocol (and more!) to https://atom.io
 */
var _ = require('lodash');
var request_light_1 = require('request-light');
var FEED_INDEX_URL = 'https://api.nuget.org/v3/index.json';
var LIMIT = 30;
var RESOLVE_ID = 'ProjectJSONContribution-';
var CACHE_EXPIRY = 1000 * 60 * 5; // 5 minutes
var ProjectJSONContribution = (function () {
    function ProjectJSONContribution() {
        this.cachedProjects = {};
        this.cacheSize = 0;
    }
    ProjectJSONContribution.prototype._isProjectJSONFile = function (resource) {
        return _.endsWith(resource, '/project.json');
    };
    ProjectJSONContribution.prototype._completeWithCache = function (id, item) {
        var entry = this.cachedProjects[id];
        if (entry) {
            if (new Date().getTime() - entry.time > CACHE_EXPIRY) {
                delete this.cachedProjects[id];
                this.cacheSize--;
                return false;
            }
            item.detail = entry.version;
            item.documentation = entry.description;
            item.insertText = item.insertText.replace(/\{\{\}\}/, '{{' + entry.version + '}}');
            return true;
        }
        return false;
    };
    ProjectJSONContribution.prototype._addCached = function (id, version, description) {
        this.cachedProjects[id] = { version: version, description: description, time: new Date().getTime() };
        this.cacheSize++;
        if (this.cacheSize > 50) {
            var currentTime = new Date().getTime();
            for (var id_1 in this.cachedProjects) {
                var entry = this.cachedProjects[id_1];
                if (currentTime - entry.time > CACHE_EXPIRY) {
                    delete this.cachedProjects[id_1];
                    this.cacheSize--;
                }
            }
        }
    };
    ProjectJSONContribution.prototype._getNugetIndex = function () {
        if (!this.nugetIndexPromise) {
            this.nugetIndexPromise = this.makeJSONRequest(FEED_INDEX_URL).then(function (indexContent) {
                var services = {};
                if (indexContent && Array.isArray(indexContent.resources)) {
                    var resources = indexContent.resources;
                    for (var i = resources.length - 1; i >= 0; i--) {
                        var type = resources[i]['@type'];
                        var id = resources[i]['@id'];
                        if (type && id) {
                            services[type] = id;
                        }
                    }
                }
                return services;
            });
        }
        return this.nugetIndexPromise;
    };
    ProjectJSONContribution.prototype._getNugetService = function (serviceType) {
        return this._getNugetIndex().then(function (services) {
            var serviceURL = services[serviceType];
            if (!serviceURL) {
                return Promise.reject("NuGet index document is missing service " + serviceType);
            }
            return serviceURL;
        });
    };
    ProjectJSONContribution.prototype.collectDefaultCompletions = function (resource, result) {
        if (this._isProjectJSONFile(resource)) {
            var defaultValue = {
                'version': '{{1.0.0-*}}',
                'dependencies': {},
                'frameworks': {
                    'dnx451': {},
                    'dnxcore50': {}
                }
            };
            result.add({ kind: 7 /* Class */, label: 'Default project.json', insertText: JSON.stringify(defaultValue, null, '\t'), documentation: '' });
        }
        return null;
    };
    ProjectJSONContribution.prototype.makeJSONRequest = function (url) {
        return request_light_1.xhr({
            url: url
        }).then(function (success) {
            if (success.status === 200) {
                try {
                    return JSON.parse(success.responseText);
                }
                catch (e) {
                    return Promise.reject("'{0} is not a valid JSON document', url");
                }
            }
            return Promise.reject("Request to " + url + " failed: " + success.responseText);
        }, function (error) {
            return Promise.reject("Request to " + url + " failed: " + request_light_1.getErrorStatusDescription(error.status));
        });
    };
    ProjectJSONContribution.prototype.collectPropertyCompletions = function (resource, location, currentWord, addValue, isLast, result) {
        var _this = this;
        if (this._isProjectJSONFile(resource) && (matches(location, ['dependencies']) || matches(location, ['frameworks', '*', 'dependencies']) || matches(location, ['frameworks', '*', 'frameworkAssemblies']))) {
            return this._getNugetService('SearchAutocompleteService').then(function (service) {
                var queryUrl;
                if (currentWord.length > 0) {
                    queryUrl = service + '?q=' + encodeURIComponent(currentWord) + '&take=' + LIMIT;
                }
                else {
                    queryUrl = service + '?take=' + LIMIT;
                }
                return _this.makeJSONRequest(queryUrl).then(function (resultObj) {
                    if (Array.isArray(resultObj.data)) {
                        var results = resultObj.data;
                        for (var i = 0; i < results.length; i++) {
                            var name_1 = results[i];
                            var insertText = JSON.stringify(name_1);
                            if (addValue) {
                                insertText += ': "{{}}"';
                                if (!isLast) {
                                    insertText += ',';
                                }
                            }
                            var item = { kind: 10 /* Property */, label: name_1, insertText: insertText };
                            if (!_this._completeWithCache(name_1, item)) {
                                item.data = RESOLVE_ID + name_1;
                            }
                            result.add(item);
                        }
                        if (results.length === LIMIT) {
                            result.setAsIncomplete();
                        }
                    }
                }, function (error) {
                    result.error(error);
                });
            }, function (error) {
                result.error(error);
            });
        }
        ;
        return null;
    };
    ProjectJSONContribution.prototype.collectValueCompletions = function (resource, location, currentKey, result) {
        var _this = this;
        if (this._isProjectJSONFile(resource) && (matches(location, ['dependencies']) || matches(location, ['frameworks', '*', 'dependencies']) || matches(location, ['frameworks', '*', 'frameworkAssemblies']))) {
            return this._getNugetService('PackageBaseAddress/3.0.0').then(function (service) {
                var queryUrl = service + currentKey + '/index.json';
                return _this.makeJSONRequest(queryUrl).then(function (obj) {
                    if (Array.isArray(obj.versions)) {
                        var results = obj.versions;
                        for (var i = 0; i < results.length; i++) {
                            var curr = results[i];
                            var name_2 = JSON.stringify(curr);
                            var label = name_2;
                            var documentation = '';
                            result.add({ kind: 7 /* Class */, label: label, insertText: name_2, documentation: documentation });
                        }
                        if (results.length === LIMIT) {
                            result.setAsIncomplete();
                        }
                    }
                }, function (error) {
                    result.error(error);
                });
            }, function (error) {
                result.error(error);
            });
        }
        return null;
    };
    ProjectJSONContribution.prototype.getInfoContribution = function (resource, location) {
        var _this = this;
        if (this._isProjectJSONFile(resource) && (matches(location, ['dependencies', '*']) || matches(location, ['frameworks', '*', 'dependencies', '*']) || matches(location, ['frameworks', '*', 'frameworkAssemblies', '*']))) {
            var pack_1 = location[location.length - 1];
            return this._getNugetService('SearchQueryService').then(function (service) {
                var queryUrl = service + '?q=' + encodeURIComponent(pack_1) + '&take=' + 5;
                return _this.makeJSONRequest(queryUrl).then(function (resultObj) {
                    var htmlContent = [];
                    htmlContent.push(pack_1);
                    if (Array.isArray(resultObj.data)) {
                        var results = resultObj.data;
                        for (var i = 0; i < results.length; i++) {
                            var res = results[i];
                            _this._addCached(res.id, res.version, res.description);
                            if (res.id === pack_1) {
                                if (res.description) {
                                    htmlContent.push({ language: 'string', value: res.description });
                                }
                                if (res.version) {
                                    htmlContent.push({ language: 'string', value: "Latest version: " + res.version });
                                }
                                break;
                            }
                        }
                    }
                    return htmlContent;
                }, function (error) {
                    return null;
                });
            }, function (error) {
                return null;
            });
        }
        return null;
    };
    ProjectJSONContribution.prototype.resolveSuggestion = function (item) {
        var _this = this;
        if (item.data && _.startsWith(item.data, RESOLVE_ID)) {
            var pack_2 = item.data.substring(RESOLVE_ID.length);
            if (this._completeWithCache(pack_2, item)) {
                return Promise.resolve(item);
            }
            return this._getNugetService('SearchQueryService').then(function (service) {
                var queryUrl = service + '?q=' + encodeURIComponent(pack_2) + '&take=' + 10;
                return _this.makeJSONRequest(queryUrl).then(function (resultObj) {
                    var itemResolved = false;
                    if (Array.isArray(resultObj.data)) {
                        var results = resultObj.data;
                        for (var i = 0; i < results.length; i++) {
                            var curr = results[i];
                            _this._addCached(curr.id, curr.version, curr.description);
                            if (curr.id === pack_2) {
                                _this._completeWithCache(pack_2, item);
                                itemResolved = true;
                            }
                        }
                    }
                    return itemResolved ? item : null;
                });
            });
        }
        ;
        return null;
    };
    return ProjectJSONContribution;
}());
exports.ProjectJSONContribution = ProjectJSONContribution;
function matches(segments, pattern) {
    var k = 0;
    for (var i = 0; k < pattern.length && i < segments.length; i++) {
        if (pattern[k] === segments[i] || pattern[k] === '*') {
            k++;
        }
        else if (pattern[k] !== '**') {
            return false;
        }
    }
    return k === pattern.length;
}
//# sourceMappingURL=data:application/json;base64,