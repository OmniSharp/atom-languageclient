"use strict";
/**
 *  @license   MIT
 *  @copyright OmniSharp Team
 *  @summary   Adds support for https://github.com/Microsoft/language-server-protocol (and more!) to https://atom.io
 */
var _ = require('lodash');
var globProperties = [
    { kind: 12 /* Value */, label: 'Files by Extension', insertText: '"**/*.{{extension}}": true', documentation: 'Match all files of a specific file extension.' },
    { kind: 12 /* Value */, label: 'Files with Multiple Extensions', insertText: '"**/*.{ext1,ext2,ext3}": true', documentation: 'Match all files with any of the file extensions.' },
    { kind: 12 /* Value */, label: 'Files with Siblings by Name', insertText: '"**/*.{{source-extension}}": { "when": "$(basename).{{target-extension}}" }', documentation: 'Match files that have siblings with the same name but a different extension.' },
    { kind: 12 /* Value */, label: 'Folder by Name (Top Level)', insertText: '"{{name}}": true', documentation: 'Match a top level folder with a specific name.' },
    { kind: 12 /* Value */, label: 'Folders with Multiple Names (Top Level)', insertText: '"{folder1,folder2,folder3}": true', documentation: 'Match multiple top level folders.' },
    { kind: 12 /* Value */, label: 'Folder by Name (Any Location)', insertText: '"**/{{name}}": true', documentation: 'Match a folder with a specific name in any location.' },
];
var globValues = [
    { kind: 12 /* Value */, label: 'True', insertText: 'true', documentation: 'Enable the pattern.' },
    { kind: 12 /* Value */, label: 'False', insertText: 'false', documentation: 'Disable the pattern.' },
    { kind: 12 /* Value */, label: 'Files with Siblings by Name', insertText: '{ "when": "$(basename).{{extension}}" }', documentation: 'Match files that have siblings with the same name but a different extension.' }
];
var GlobPatternContribution = (function () {
    function GlobPatternContribution() {
    }
    GlobPatternContribution.prototype._isSettingsFile = function (resource) {
        return _.endsWith(resource, '/settings.json');
    };
    GlobPatternContribution.prototype.collectDefaultCompletions = function (resource, result) {
        return null;
    };
    GlobPatternContribution.prototype.collectPropertyCompletions = function (resource, location, currentWord, addValue, isLast, result) {
        if (this._isSettingsFile(resource) && location.length === 1 && ((location[0] === 'files.exclude') || (location[0] === 'search.exclude'))) {
            globProperties.forEach(function (e) { return result.add(e); });
        }
        return null;
    };
    GlobPatternContribution.prototype.collectValueCompletions = function (resource, location, currentKey, result) {
        if (this._isSettingsFile(resource) && location.length === 1 && ((location[0] === 'files.exclude') || (location[0] === 'search.exclude'))) {
            globValues.forEach(function (e) { return result.add(e); });
        }
        return null;
    };
    GlobPatternContribution.prototype.getInfoContribution = function (resource, location) {
        return null;
    };
    return GlobPatternContribution;
}());
exports.GlobPatternContribution = GlobPatternContribution;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYlBhdHRlcm5Db250cmlidXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wbHVnaW5zL2F0b20tbGFuZ3VhZ2UtanNvbi9zZXJ2ZXIvanNvbmNvbnRyaWJ1dGlvbnMvZ2xvYlBhdHRlcm5Db250cmlidXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7QUFDSCxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUk1QixJQUFNLGNBQWMsR0FBcUI7SUFDckMsRUFBRSxJQUFJLEVBQUUsY0FBd0IsRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFFLDRCQUE0QixFQUFFLGFBQWEsRUFBRSwrQ0FBK0MsRUFBRTtJQUN6SyxFQUFFLElBQUksRUFBRSxjQUF3QixFQUFFLEtBQUssRUFBRSxnQ0FBZ0MsRUFBRSxVQUFVLEVBQUUsK0JBQStCLEVBQUUsYUFBYSxFQUFFLGtEQUFrRCxFQUFFO0lBQzNMLEVBQUUsSUFBSSxFQUFFLGNBQXdCLEVBQUUsS0FBSyxFQUFFLDZCQUE2QixFQUFFLFVBQVUsRUFBRSw2RUFBNkUsRUFBRSxhQUFhLEVBQUUsOEVBQThFLEVBQUU7SUFDbFEsRUFBRSxJQUFJLEVBQUUsY0FBd0IsRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxnREFBZ0QsRUFBRTtJQUN4SyxFQUFFLElBQUksRUFBRSxjQUF3QixFQUFFLEtBQUssRUFBRSx5Q0FBeUMsRUFBRSxVQUFVLEVBQUUsbUNBQW1DLEVBQUUsYUFBYSxFQUFFLG1DQUFtQyxFQUFFO0lBQ3pMLEVBQUUsSUFBSSxFQUFFLGNBQXdCLEVBQUUsS0FBSyxFQUFFLCtCQUErQixFQUFFLFVBQVUsRUFBRSxxQkFBcUIsRUFBRSxhQUFhLEVBQUUsc0RBQXNELEVBQUU7Q0FDdkwsQ0FBQztBQUVGLElBQU0sVUFBVSxHQUFxQjtJQUNqQyxFQUFFLElBQUksRUFBRSxjQUF3QixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUscUJBQXFCLEVBQUU7SUFDM0csRUFBRSxJQUFJLEVBQUUsY0FBd0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLHNCQUFzQixFQUFFO0lBQzlHLEVBQUUsSUFBSSxFQUFFLGNBQXdCLEVBQUUsS0FBSyxFQUFFLDZCQUE2QixFQUFFLFVBQVUsRUFBRSx5Q0FBeUMsRUFBRSxhQUFhLEVBQUUsOEVBQThFLEVBQUU7Q0FDak8sQ0FBQztBQUVGO0lBQUE7SUE2QkEsQ0FBQztJQTNCVyxpREFBZSxHQUF2QixVQUF3QixRQUFnQjtRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sMkRBQXlCLEdBQWhDLFVBQWlDLFFBQWdCLEVBQUUsTUFBNEI7UUFDM0UsTUFBTSxDQUFDLElBQUssQ0FBQztJQUNqQixDQUFDO0lBRU0sNERBQTBCLEdBQWpDLFVBQWtDLFFBQWdCLEVBQUUsUUFBa0IsRUFBRSxXQUFtQixFQUFFLFFBQWlCLEVBQUUsTUFBZSxFQUFFLE1BQTRCO1FBQ3pKLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZJLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFiLENBQWEsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSyxDQUFDO0lBQ2pCLENBQUM7SUFFTSx5REFBdUIsR0FBOUIsVUFBK0IsUUFBZ0IsRUFBRSxRQUFrQixFQUFFLFVBQWtCLEVBQUUsTUFBNEI7UUFDakgsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkksVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFLLENBQUM7SUFDakIsQ0FBQztJQUVNLHFEQUFtQixHQUExQixVQUEyQixRQUFnQixFQUFFLFFBQWtCO1FBQzNELE1BQU0sQ0FBQyxJQUFLLENBQUM7SUFDakIsQ0FBQztJQUNMLDhCQUFDO0FBQUQsQ0FBQyxBQTdCRCxJQTZCQztBQTdCWSwrQkFBdUIsMEJBNkJuQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQGxpY2Vuc2UgICBNSVRcbiAqICBAY29weXJpZ2h0IE9tbmlTaGFycCBUZWFtXG4gKiAgQHN1bW1hcnkgICBBZGRzIHN1cHBvcnQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sIChhbmQgbW9yZSEpIHRvIGh0dHBzOi8vYXRvbS5pb1xuICovXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBDb21wbGV0aW9uc0NvbGxlY3RvciwgSlNPTlBhdGgsIEpTT05Xb3JrZXJDb250cmlidXRpb24gfSBmcm9tICd2c2NvZGUtanNvbi1sYW5ndWFnZXNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tcGxldGlvbkl0ZW0sIENvbXBsZXRpb25JdGVtS2luZCwgTWFya2VkU3RyaW5nIH0gZnJvbSAnYXRvbS1sYW5ndWFnZXNlcnZpY2VzL3R5cGVzJztcblxuY29uc3QgZ2xvYlByb3BlcnRpZXM6IENvbXBsZXRpb25JdGVtW10gPSBbXG4gICAgeyBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWUsIGxhYmVsOiAnRmlsZXMgYnkgRXh0ZW5zaW9uJywgaW5zZXJ0VGV4dDogJ1wiKiovKi57e2V4dGVuc2lvbn19XCI6IHRydWUnLCBkb2N1bWVudGF0aW9uOiAnTWF0Y2ggYWxsIGZpbGVzIG9mIGEgc3BlY2lmaWMgZmlsZSBleHRlbnNpb24uJyB9LFxuICAgIHsga2luZDogQ29tcGxldGlvbkl0ZW1LaW5kLlZhbHVlLCBsYWJlbDogJ0ZpbGVzIHdpdGggTXVsdGlwbGUgRXh0ZW5zaW9ucycsIGluc2VydFRleHQ6ICdcIioqLyoue2V4dDEsZXh0MixleHQzfVwiOiB0cnVlJywgZG9jdW1lbnRhdGlvbjogJ01hdGNoIGFsbCBmaWxlcyB3aXRoIGFueSBvZiB0aGUgZmlsZSBleHRlbnNpb25zLicgfSxcbiAgICB7IGtpbmQ6IENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSwgbGFiZWw6ICdGaWxlcyB3aXRoIFNpYmxpbmdzIGJ5IE5hbWUnLCBpbnNlcnRUZXh0OiAnXCIqKi8qLnt7c291cmNlLWV4dGVuc2lvbn19XCI6IHsgXCJ3aGVuXCI6IFwiJChiYXNlbmFtZSkue3t0YXJnZXQtZXh0ZW5zaW9ufX1cIiB9JywgZG9jdW1lbnRhdGlvbjogJ01hdGNoIGZpbGVzIHRoYXQgaGF2ZSBzaWJsaW5ncyB3aXRoIHRoZSBzYW1lIG5hbWUgYnV0IGEgZGlmZmVyZW50IGV4dGVuc2lvbi4nIH0sXG4gICAgeyBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWUsIGxhYmVsOiAnRm9sZGVyIGJ5IE5hbWUgKFRvcCBMZXZlbCknLCBpbnNlcnRUZXh0OiAnXCJ7e25hbWV9fVwiOiB0cnVlJywgZG9jdW1lbnRhdGlvbjogJ01hdGNoIGEgdG9wIGxldmVsIGZvbGRlciB3aXRoIGEgc3BlY2lmaWMgbmFtZS4nIH0sXG4gICAgeyBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWUsIGxhYmVsOiAnRm9sZGVycyB3aXRoIE11bHRpcGxlIE5hbWVzIChUb3AgTGV2ZWwpJywgaW5zZXJ0VGV4dDogJ1wie2ZvbGRlcjEsZm9sZGVyMixmb2xkZXIzfVwiOiB0cnVlJywgZG9jdW1lbnRhdGlvbjogJ01hdGNoIG11bHRpcGxlIHRvcCBsZXZlbCBmb2xkZXJzLicgfSxcbiAgICB7IGtpbmQ6IENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSwgbGFiZWw6ICdGb2xkZXIgYnkgTmFtZSAoQW55IExvY2F0aW9uKScsIGluc2VydFRleHQ6ICdcIioqL3t7bmFtZX19XCI6IHRydWUnLCBkb2N1bWVudGF0aW9uOiAnTWF0Y2ggYSBmb2xkZXIgd2l0aCBhIHNwZWNpZmljIG5hbWUgaW4gYW55IGxvY2F0aW9uLicgfSxcbl07XG5cbmNvbnN0IGdsb2JWYWx1ZXM6IENvbXBsZXRpb25JdGVtW10gPSBbXG4gICAgeyBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWUsIGxhYmVsOiAnVHJ1ZScsIGluc2VydFRleHQ6ICd0cnVlJywgZG9jdW1lbnRhdGlvbjogJ0VuYWJsZSB0aGUgcGF0dGVybi4nIH0sXG4gICAgeyBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWUsIGxhYmVsOiAnRmFsc2UnLCBpbnNlcnRUZXh0OiAnZmFsc2UnLCBkb2N1bWVudGF0aW9uOiAnRGlzYWJsZSB0aGUgcGF0dGVybi4nIH0sXG4gICAgeyBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWUsIGxhYmVsOiAnRmlsZXMgd2l0aCBTaWJsaW5ncyBieSBOYW1lJywgaW5zZXJ0VGV4dDogJ3sgXCJ3aGVuXCI6IFwiJChiYXNlbmFtZSkue3tleHRlbnNpb259fVwiIH0nLCBkb2N1bWVudGF0aW9uOiAnTWF0Y2ggZmlsZXMgdGhhdCBoYXZlIHNpYmxpbmdzIHdpdGggdGhlIHNhbWUgbmFtZSBidXQgYSBkaWZmZXJlbnQgZXh0ZW5zaW9uLicgfVxuXTtcblxuZXhwb3J0IGNsYXNzIEdsb2JQYXR0ZXJuQ29udHJpYnV0aW9uIGltcGxlbWVudHMgSlNPTldvcmtlckNvbnRyaWJ1dGlvbiB7XG5cbiAgICBwcml2YXRlIF9pc1NldHRpbmdzRmlsZShyZXNvdXJjZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBfLmVuZHNXaXRoKHJlc291cmNlLCAnL3NldHRpbmdzLmpzb24nKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29sbGVjdERlZmF1bHRDb21wbGV0aW9ucyhyZXNvdXJjZTogc3RyaW5nLCByZXN1bHQ6IENvbXBsZXRpb25zQ29sbGVjdG9yKTogVGhlbmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiBudWxsITtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29sbGVjdFByb3BlcnR5Q29tcGxldGlvbnMocmVzb3VyY2U6IHN0cmluZywgbG9jYXRpb246IEpTT05QYXRoLCBjdXJyZW50V29yZDogc3RyaW5nLCBhZGRWYWx1ZTogYm9vbGVhbiwgaXNMYXN0OiBib29sZWFuLCByZXN1bHQ6IENvbXBsZXRpb25zQ29sbGVjdG9yKTogVGhlbmFibGU8YW55PiB7XG4gICAgICAgIGlmICh0aGlzLl9pc1NldHRpbmdzRmlsZShyZXNvdXJjZSkgJiYgbG9jYXRpb24ubGVuZ3RoID09PSAxICYmICgobG9jYXRpb25bMF0gPT09ICdmaWxlcy5leGNsdWRlJykgfHwgKGxvY2F0aW9uWzBdID09PSAnc2VhcmNoLmV4Y2x1ZGUnKSkpIHtcbiAgICAgICAgICAgIGdsb2JQcm9wZXJ0aWVzLmZvckVhY2goKGUpID0+IHJlc3VsdC5hZGQoZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGwhO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb2xsZWN0VmFsdWVDb21wbGV0aW9ucyhyZXNvdXJjZTogc3RyaW5nLCBsb2NhdGlvbjogSlNPTlBhdGgsIGN1cnJlbnRLZXk6IHN0cmluZywgcmVzdWx0OiBDb21wbGV0aW9uc0NvbGxlY3Rvcik6IFRoZW5hYmxlPGFueT4ge1xuICAgICAgICBpZiAodGhpcy5faXNTZXR0aW5nc0ZpbGUocmVzb3VyY2UpICYmIGxvY2F0aW9uLmxlbmd0aCA9PT0gMSAmJiAoKGxvY2F0aW9uWzBdID09PSAnZmlsZXMuZXhjbHVkZScpIHx8IChsb2NhdGlvblswXSA9PT0gJ3NlYXJjaC5leGNsdWRlJykpKSB7XG4gICAgICAgICAgICBnbG9iVmFsdWVzLmZvckVhY2goKGUpID0+IHJlc3VsdC5hZGQoZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGwhO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbmZvQ29udHJpYnV0aW9uKHJlc291cmNlOiBzdHJpbmcsIGxvY2F0aW9uOiBKU09OUGF0aCk6IFRoZW5hYmxlPE1hcmtlZFN0cmluZ1tdPiB7XG4gICAgICAgIHJldHVybiBudWxsITtcbiAgICB9XG59XG4iXX0=