"use strict";
function getLanguageModelCache(maxEntries, cleanupIntervalTimeInSec, parse) {
    var languageModels = {};
    var nModels = 0;
    var cleanupInterval = void 0;
    if (cleanupIntervalTimeInSec > 0) {
        cleanupInterval = setInterval(function () {
            var cutoffTime = Date.now() - cleanupIntervalTimeInSec * 1000;
            var uris = Object.keys(languageModels);
            for (var _i = 0, uris_1 = uris; _i < uris_1.length; _i++) {
                var uri = uris_1[_i];
                var languageModelInfo = languageModels[uri];
                if (languageModelInfo.cTime < cutoffTime) {
                    delete languageModels[uri];
                    nModels--;
                }
            }
        }, cleanupIntervalTimeInSec * 1000);
    }
    return {
        get: function (document) {
            var version = document.version;
            var languageId = document.languageId;
            var languageModelInfo = languageModels[document.uri];
            if (languageModelInfo && languageModelInfo.version === version && languageModelInfo.languageId === languageId) {
                languageModelInfo.cTime = Date.now();
                return languageModelInfo.languageModel;
            }
            var languageModel = parse(document);
            languageModels[document.uri] = { languageModel: languageModel, version: version, languageId: languageId, cTime: Date.now() };
            if (!languageModelInfo) {
                nModels++;
            }
            if (nModels === maxEntries) {
                var oldestTime = Number.MAX_VALUE;
                var oldestUri = null;
                for (var uri in languageModels) {
                    var languageModelInfo_1 = languageModels[uri];
                    if (languageModelInfo_1.cTime < oldestTime) {
                        oldestUri = uri;
                        oldestTime = languageModelInfo_1.cTime;
                    }
                }
                if (oldestUri) {
                    delete languageModels[oldestUri];
                    nModels--;
                }
            }
            return languageModel;
        },
        onDocumentRemoved: function (document) {
            var uri = document.uri;
            if (languageModels[uri]) {
                delete languageModels[uri];
                nModels--;
            }
        },
        dispose: function () {
            if (cleanupInterval !== undefined) {
                clearInterval(cleanupInterval);
                cleanupInterval = void 0;
                languageModels = {};
                nModels = 0;
            }
        }
    };
}
exports.getLanguageModelCache = getLanguageModelCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2VNb2RlbENhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGx1Z2lucy9hdG9tLWxhbmd1YWdlLWpzb24vc2VydmVyL2xhbmd1YWdlTW9kZWxDYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBYUEsK0JBQXlDLFVBQWtCLEVBQUUsd0JBQWdDLEVBQUUsS0FBb0M7SUFDL0gsSUFBSSxjQUFjLEdBQWdHLEVBQUUsQ0FBQztJQUNySCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFFaEIsSUFBSSxlQUFlLEdBQXdCLEtBQUssQ0FBQyxDQUFDO0lBQ2xELEVBQUUsQ0FBQyxDQUFDLHdCQUF3QixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsZUFBZSxHQUFHLFdBQVcsQ0FDekI7WUFDSSxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO1lBQ2hFLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDekMsR0FBRyxDQUFDLENBQVksVUFBSSxFQUFKLGFBQUksRUFBSixrQkFBSSxFQUFKLElBQUksQ0FBQztnQkFBaEIsSUFBSSxHQUFHLGFBQUE7Z0JBQ1IsSUFBTSxpQkFBaUIsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzlDLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUN2QyxPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDM0IsT0FBTyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQzthQUNKO1FBQ0wsQ0FBQyxFQUNELHdCQUF3QixHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUM7UUFDSCxHQUFHLFlBQUMsUUFBc0I7WUFDdEIsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUNqQyxJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBQ3ZDLElBQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2RCxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLEtBQUssT0FBTyxJQUFJLGlCQUFpQixDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUM1RyxpQkFBaUIsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNyQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDO1lBQzNDLENBQUM7WUFDRCxJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdEMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLDRCQUFhLEVBQUUsZ0JBQU8sRUFBRSxzQkFBVSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztZQUN6RixFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztnQkFDckIsT0FBTyxFQUFFLENBQUM7WUFDZCxDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBQ2xDLElBQUksU0FBUyxHQUFRLElBQUksQ0FBQztnQkFDMUIsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxtQkFBaUIsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzVDLEVBQUUsQ0FBQyxDQUFDLG1CQUFpQixDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO3dCQUN2QyxTQUFTLEdBQUcsR0FBRyxDQUFDO3dCQUNoQixVQUFVLEdBQUcsbUJBQWlCLENBQUMsS0FBSyxDQUFDO29CQUN6QyxDQUFDO2dCQUNMLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDWixPQUFPLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDakMsT0FBTyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQztZQUNMLENBQUM7WUFDRCxNQUFNLENBQUMsYUFBYSxDQUFDO1FBRXpCLENBQUM7UUFDRCxpQkFBaUIsWUFBQyxRQUFzQjtZQUNwQyxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ3pCLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixPQUFPLEVBQUUsQ0FBQztZQUNkLENBQUM7UUFDTCxDQUFDO1FBQ0QsT0FBTztZQUNILEVBQUUsQ0FBQyxDQUFDLGVBQWUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQy9CLGVBQWUsR0FBRyxLQUFLLENBQUMsQ0FBQztnQkFDekIsY0FBYyxHQUFHLEVBQUUsQ0FBQztnQkFDcEIsT0FBTyxHQUFHLENBQUMsQ0FBQztZQUNoQixDQUFDO1FBQ0wsQ0FBQztLQUNKLENBQUM7QUFDTixDQUFDO0FBdEVlLDZCQUFxQix3QkFzRXBDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBAbGljZW5zZSAgIE1JVFxuICogIEBjb3B5cmlnaHQgT21uaVNoYXJwIFRlYW1cbiAqICBAc3VtbWFyeSAgIEFkZHMgc3VwcG9ydCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wgKGFuZCBtb3JlISkgdG8gaHR0cHM6Ly9hdG9tLmlvXG4gKi9cbi8qIHRzbGludDpkaXNhYmxlOm5vLWZvci1pbiAqL1xuaW1wb3J0IHsgVGV4dERvY3VtZW50IH0gZnJvbSAndnNjb2RlLWxhbmd1YWdlc2VydmVyJztcbmV4cG9ydCBpbnRlcmZhY2UgTGFuZ3VhZ2VNb2RlbENhY2hlPFQ+IHtcbiAgICBnZXQoZG9jdW1lbnQ6IFRleHREb2N1bWVudCk6IFQ7XG4gICAgb25Eb2N1bWVudFJlbW92ZWQoZG9jdW1lbnQ6IFRleHREb2N1bWVudCk6IHZvaWQ7XG4gICAgZGlzcG9zZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VNb2RlbENhY2hlPFQ+KG1heEVudHJpZXM6IG51bWJlciwgY2xlYW51cEludGVydmFsVGltZUluU2VjOiBudW1iZXIsIHBhcnNlOiAoZG9jdW1lbnQ6IFRleHREb2N1bWVudCkgPT4gVCk6IExhbmd1YWdlTW9kZWxDYWNoZTxUPiB7XG4gICAgbGV0IGxhbmd1YWdlTW9kZWxzOiB7IFt1cmk6IHN0cmluZ106IHsgdmVyc2lvbjogbnVtYmVyLCBsYW5ndWFnZUlkOiBzdHJpbmcsIGNUaW1lOiBudW1iZXIsIGxhbmd1YWdlTW9kZWw6IFQgfSB9ID0ge307XG4gICAgbGV0IG5Nb2RlbHMgPSAwO1xuXG4gICAgbGV0IGNsZWFudXBJbnRlcnZhbDogTm9kZUpTLlRpbWVyIHwgdm9pZCA9IHZvaWQgMDtcbiAgICBpZiAoY2xlYW51cEludGVydmFsVGltZUluU2VjID4gMCkge1xuICAgICAgICBjbGVhbnVwSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXRvZmZUaW1lID0gRGF0ZS5ub3coKSAtIGNsZWFudXBJbnRlcnZhbFRpbWVJblNlYyAqIDEwMDA7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJpcyA9IE9iamVjdC5rZXlzKGxhbmd1YWdlTW9kZWxzKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB1cmkgb2YgdXJpcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYW5ndWFnZU1vZGVsSW5mbyA9IGxhbmd1YWdlTW9kZWxzW3VyaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZU1vZGVsSW5mby5jVGltZSA8IGN1dG9mZlRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsYW5ndWFnZU1vZGVsc1t1cmldO1xuICAgICAgICAgICAgICAgICAgICAgICAgbk1vZGVscy0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsZWFudXBJbnRlcnZhbFRpbWVJblNlYyAqIDEwMDApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldChkb2N1bWVudDogVGV4dERvY3VtZW50KTogVCB7XG4gICAgICAgICAgICBjb25zdCB2ZXJzaW9uID0gZG9jdW1lbnQudmVyc2lvbjtcbiAgICAgICAgICAgIGNvbnN0IGxhbmd1YWdlSWQgPSBkb2N1bWVudC5sYW5ndWFnZUlkO1xuICAgICAgICAgICAgY29uc3QgbGFuZ3VhZ2VNb2RlbEluZm8gPSBsYW5ndWFnZU1vZGVsc1tkb2N1bWVudC51cmldO1xuICAgICAgICAgICAgaWYgKGxhbmd1YWdlTW9kZWxJbmZvICYmIGxhbmd1YWdlTW9kZWxJbmZvLnZlcnNpb24gPT09IHZlcnNpb24gJiYgbGFuZ3VhZ2VNb2RlbEluZm8ubGFuZ3VhZ2VJZCA9PT0gbGFuZ3VhZ2VJZCkge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlTW9kZWxJbmZvLmNUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFuZ3VhZ2VNb2RlbEluZm8ubGFuZ3VhZ2VNb2RlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxhbmd1YWdlTW9kZWwgPSBwYXJzZShkb2N1bWVudCk7XG4gICAgICAgICAgICBsYW5ndWFnZU1vZGVsc1tkb2N1bWVudC51cmldID0geyBsYW5ndWFnZU1vZGVsLCB2ZXJzaW9uLCBsYW5ndWFnZUlkLCBjVGltZTogRGF0ZS5ub3coKSB9O1xuICAgICAgICAgICAgaWYgKCFsYW5ndWFnZU1vZGVsSW5mbykge1xuICAgICAgICAgICAgICAgIG5Nb2RlbHMrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5Nb2RlbHMgPT09IG1heEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgb2xkZXN0VGltZSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICAgICAgbGV0IG9sZGVzdFVyaTogYW55ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB1cmkgaW4gbGFuZ3VhZ2VNb2RlbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhbmd1YWdlTW9kZWxJbmZvID0gbGFuZ3VhZ2VNb2RlbHNbdXJpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmd1YWdlTW9kZWxJbmZvLmNUaW1lIDwgb2xkZXN0VGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkZXN0VXJpID0gdXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkZXN0VGltZSA9IGxhbmd1YWdlTW9kZWxJbmZvLmNUaW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvbGRlc3RVcmkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxhbmd1YWdlTW9kZWxzW29sZGVzdFVyaV07XG4gICAgICAgICAgICAgICAgICAgIG5Nb2RlbHMtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGFuZ3VhZ2VNb2RlbDtcblxuICAgICAgICB9LFxuICAgICAgICBvbkRvY3VtZW50UmVtb3ZlZChkb2N1bWVudDogVGV4dERvY3VtZW50KSB7XG4gICAgICAgICAgICBjb25zdCB1cmkgPSBkb2N1bWVudC51cmk7XG4gICAgICAgICAgICBpZiAobGFuZ3VhZ2VNb2RlbHNbdXJpXSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsYW5ndWFnZU1vZGVsc1t1cmldO1xuICAgICAgICAgICAgICAgIG5Nb2RlbHMtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGlzcG9zZSgpIHtcbiAgICAgICAgICAgIGlmIChjbGVhbnVwSW50ZXJ2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY2xlYW51cEludGVydmFsKTtcbiAgICAgICAgICAgICAgICBjbGVhbnVwSW50ZXJ2YWwgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VNb2RlbHMgPSB7fTtcbiAgICAgICAgICAgICAgICBuTW9kZWxzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iXX0=